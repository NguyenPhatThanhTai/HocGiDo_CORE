@page
@model HocGiDo_CORE.Pages.Adm.suacauhoiConModel
@{
    Layout = "";

}
@if (Model.question.TheLoai.Equals("tracnghiem"))
{
    <div class="switchType">
        <button class="choseExamType">Trắc nghiệm</button>
    </div>
    <div class="listAnswer typeCode" style="width: 100%;">
        <form id="updateExam">
            <div id="question">
                <input id="questName" type="text" value="@Model.question.NoiDungCauHoi" placeholder="Sửa câu hỏi">
                <input id="MaCH" type="hidden" value="@Model.question.MaCauHoi">
            </div>
            @if (Model.question.DapAn != null)
            {
                @foreach (var item in Model.question.DapAn)
                {
                    <div class="detailAnswer">
                        <input class="deleteAnswer" data-chid="@item.MaDapAn" type="button" value="Xóa">
                        <input name="answerContent" type="text" value="@item.NoiDungDapAn" placeholder="Sửa câu trả lời ">
                        @if (item.DapAnDung)
                        {
                            <input name="trueAnswer" type="radio" value="@item.MaDapAn" checked><span>Đáp án đúng</span><br>
                        }
                        else
                        {
                            <input name="trueAnswer" type="radio" value="@item.MaDapAn"><span>Đáp án đúng</span><br>
                        }
                        <input name="answerId" type="hidden" value="@item.MaDapAn">
                    </div>
                }
            }
            <div id="newQuestion">
                <input id="answerName" type="text" placeholder="Câu hỏi mới">
                <input id="addQuestion" type="button" value="Thêm câu hỏi">
            </div>
            <input type="submit" value="Cập nhật">
        </form>
    </div>
}
else
{
<form id="updateTestCase">
    <div class="switchType">
        <button class="choseExamType">Tự luận</button>
    </div>
    <div class="codeExam typeCode">
        <input id="questNameTestCase" type="text" value="@Model.question.NoiDungCauHoi" placeholder="Sửa câu hỏi">
        <div id="listTestCase">

        </div>
        <div id="addTestCase">
            <input id="testCaseContent" type="text" placeholder="Test case mới">
            <input id="testCaseResult" type="text" placeholder="Kết quả mới">
            <input id="addTestCaseMoi" type="button" value="Thêm test case">
        </div>
        <input type="submit" value="Lưu test case">
    </div>
</form>
}


@if (Model.question.TheLoai.Equals("tuluan"))
{
    @if (Model.question.DapAn != null)
    {
        @foreach (var item in Model.question.DapAn)
        {
        <script>
            var descrypted = CryptoJS.AES.decrypt('@Html.Raw(item.NoiDungDapAn)', '@Model.MaBH').toString(CryptoJS.enc.Utf8);
            descrypted = JSON.parse(descrypted);
                $('#listTestCase').append('<div class="detailTestCase"><input name="testCaseArray" type="text" placeholder="Test case" value="' + descrypted.array + '"><input type="text" name="testCaseResult" placeholder="Kết quả" value="' + descrypted.result + '"><input class="deleteTestCase" type="button" value="Xóa" data-testcase="@item.MaDapAn"><input type="hidden" name="testCaseId" value="@item.MaDapAn">');
        </script>
        }
    }
}

<script type="text/javascript">
    var typeExam = document.querySelectorAll(".choseExamType");
    typeExam[0].classList.add("active");

    document.getElementsByClassName("typeCode")[0].classList.add("active");

    typeExam.forEach(function (item, index) {
        item.addEventListener('click', function () {
            for (i = 0; i < typeExam.length; i++) {
                typeExam[i].classList.remove("active");
                document.getElementsByClassName("typeCode")[i].classList.remove("active");
            }
            this.classList.add("active");
            console.log(index)
            document.getElementsByClassName("typeCode")[index].classList.add("active");
        })
    })

    $('#addTestCaseMoi').on('click', function (e) {
       e.preventDefault();

        var answer = {
            array: $('#testCaseContent').val(),
            result: $('#testCaseResult').val(),
        }

        var encryptCauHoi = CryptoJS.AES.encrypt(JSON.stringify(answer), '@Model.MaBH');

        var content = {
            'TenDapAn': encryptCauHoi.toString(),
            'MaCH': '@Model.question.MaCauHoi',
        }

        $.ajax({
            type: "POST",
            url: "/Adm/suacauhoiCon?handler=AddAnswer",
            data: JSON.stringify(content),
            dataType: "json",
            contentType: "application/json",
            beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },

            success: function (response) {
                    if (response == 'Success') {
                        alert("Thêm câu hỏi thành công!");
                    $('#loadUpdate').load('/Adm/suacauhoiCon?bh=' + '@Model.MaBH' + '&questId=' + '@Model.MaCH');
                    }
                    else {
                        alert("Thêm câu hỏi thất bại!");
                    }
                }
            })
    })

    $('#updateTestCase').submit(function (e) {
        e.preventDefault();

        if($('#questNameTestCase').val() != ''){
            var value = [];
            $('.detailTestCase').each(function () {
                var testCase = {
                    array: $(this).find("input[name='testCaseArray']").val(),
                    result: $(this).find("input[name='testCaseResult']").val(),
                }

                var encryptCauHoi = CryptoJS.AES.encrypt(JSON.stringify(testCase), '@Model.MaBH');

                var answer = {
                    MaDA: $(this).find("input[name='testCaseId']").val(),
                    TenDapAn: encryptCauHoi.toString()
                };

                value.push(answer);
            })

            console.log(value);

            $.ajax({
                type: "POST",
                url: "/Adm/suacauhoiCon?handler=UpdateExam",
                data: {
                    MaCH: '@Model.MaCH',
                    questName: $('#questNameTestCase').val(),
                    listAnswer: value,
                    trueAnswer: "false",
                    type: "tuluan"
                },
                dataType: "json",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },

                success: function (response) {
                    if (response == 'Success') {
                        alert("Sửa thành công!");
                        $('#loadUpdate').load('/Adm/suacauhoiCon?bh=' + '@Model.MaBH' + '&questId=' + '@Model.MaCH');
                    }
                    else {
                        alert("Sửa thất bại!");
                    }
                }
            })
        }
        else{
            alert("Không được để trống!");
        }
    })

    $('#updateExam').submit(function (e) {
        e.preventDefault();
        if($("#MaCH").val() != '' && $('#questName').val() != ''){
            var value = [];
            $('.detailAnswer').each(function () {
                var answer = {
                    MaDA: $(this).find("input[name='answerId']").val(),
                    TenDapAn: $(this).find("input[name='answerContent']").val().replace(/\"|\"/gi, "''")
                };
                value.push(answer);
            })
            console.log($(this).find('input[name=trueAnswer]:checked', this).val());
            $.ajax({
                type: "POST",
                url: "/Adm/suacauhoiCon?handler=UpdateExam",
                data: {
                    MaCH: $("#MaCH").val(),
                    questName: $('#questName').val(),
                    listAnswer: value,
                    trueAnswer: $(this).find('input[name=trueAnswer]:checked', this).val(),
                    type: "tracnghiem"
                },
                dataType: "json",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (response) {
                    if (response == 'Success') {
                        alert("Sửa thành công!");
                        $('#loadUpdate').load('/Adm/suacauhoiCon?bh=' + '@Model.MaBH' + '&questId=' + '@Model.MaCH');
                    }
                    else {
                        alert("Sửa thất bại!");
                    }
                }
            })
        }
        else{
            alert('Không được để trống!');
        }
    })

    $('#questNameTestCase').submit(function (e) {
        e.preventDefault();

        var value = [];
        $('.detailTestCase').each(function () {
            var answer = {
                MaDA: $(this).find("input[name='answerId']").val(),
                TenDapAn: $(this).find("input[name='answerContent']").val()
            };
            value.push(answer);
        })
    })

    $('.deleteAnswer').on('click', function (e) {
        e.preventDefault();

        $.ajax({
            type: "POST",
            url: "/Adm/suacauhoiCon?handler=DeleteAnswer",
            data: {
                answerId: $(this).data('chid')
            },
            dataType: "json",
            beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },

            success: function (response) {
                    if (response == 'Success') {
                        alert("Xóa hỏi thành công!");
                    $('#loadUpdate').load('/Adm/suacauhoiCon?bh=' + '@Model.MaBH' + '&questId=' + '@Model.MaCH');
                    }
                    else {
                        alert("Xóa câu hỏi thất bại!");
                    }
                }
        })
    })

    $('.deleteTestCase').on('click', function (e) {
        e.preventDefault();
        alert($(this).data('testcase'));

        $.ajax({
            type: "POST",
            url: "/Adm/suacauhoiCon?handler=DeleteAnswer",
            data: {
                answerId: $(this).data('testcase')
            },
            dataType: "json",
            beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },

            success: function (response) {
                    if (response == 'Success') {
                        alert("Xóa test case thành công!");
                    $('#loadUpdate').load('/Adm/suacauhoiCon?bh=' + '@Model.MaBH' + '&questId=' + '@Model.MaCH');
                    }
                    else {
                        alert("Xóa test case thất bại!");
                    }
            }
        })
    })

    $('#addQuestion').on('click', function (e) {
            e.preventDefault();

        var content = {
            'TenDapAn': JSON.stringify($('#answerName').val()),
            'MaCH': $('#MaCH').val(),
        }

        $.ajax({
        type: "POST",
            url: "/Adm/suacauhoiCon?handler=AddAnswer",
            data: JSON.stringify(content),
            dataType: "json",
            contentType: "application/json",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("XSRF-TOKEN",
                    $('input:hidden[name="__RequestVerificationToken"]').val());
            },

            success: function (response) {
                if (response == 'Success') {
                    alert("Thêm đáp án thành công!");
                    $('#loadUpdate').load('/Adm/suacauhoiCon?bh=' + '@Model.MaBH' + '&questId=' + '@Model.MaCH');
                }
                else {
                    alert("Thêm đáp án thất bại!");
                }
            }
        })
    })
</script>

@*     var test_case_array = [{
        "array": [1, 2, 3, 4, 5],
        "result": "15"
    }, {
        "array": [11, 22, 33, 44, 55],
        "result": "165"
    }, {
        "array": [11, 23, 32, 43, 51],
        "result": "160"
    }, {
        "array": [12, 23, 33, 42, 51],
        "result": "161"
    }, {
        "array": [13, 23, 31, 43, 52],
        "result": "162"
    }, ] *@
